import cv2 as cv
import paho.mqtt.publish as publish

from kivy.app import App
from kivy.clock import Clock
from kivy.core.window import Window
from kivy.graphics.texture import Texture
from kivy.lang import Builder
from kivy.uix.button import Button
from kivy.uix.image import Image
from kivy.uix.screenmanager import Screen
from kivy.uix.widget import Widget

kv = """
#:kivy 1.11.0

<MenuScreen>:
    MainWidget:

<SettingsScreen>:
# orientation for BoxLayout children
# Then, in each BoxLayout , arrange the widgets
# size the Widget so that they do not overlap with other widgets
# Order the widget in the order it should appear in the layout
    orientation: "vertical"
    BoxLayout:
        padding: 5
        Image:
            id:img_left
            size_hint: .25,.25
            pos_hint: {"x": 0, "y": .3}

        Cam:
            id: cam1
            size_hint: .25,.25
            pos_hint: {"x": .35, "y": .3}

        Image:
            id:img_right
            size_hint: .25,.25
            pos_hint: {"x": .7, "y": .3}

    BoxLayout:    
    # size_hint: wide, height
    # pos_hint: position x% from right and y% from top
    # img_left.texture is replaced with Camera texture to record the image
        Button:
            text: 'Left'
            size_hint: 0.1,0.1
            pos_hint: {"x": .1, "y": .1}
            on_release: img_left.texture=cam1.texture

        Button:
            text: 'Image Publish'
            size_hint: 0.1, 0.1
            pos_hint: {"x": .3, "y": .1}
            on_release: root.mqtt_publish()

        Button:
            text: 'Right'
            size_hint: 0.1,0.1
            pos_hint: {"x": .5,"y": .1}
            on_release: img_right.texture = cam1.texture

ScreenManager:
    MenuScreen:
        name: 'menu'
    SettingsScreen:
        name: 'settings'
"""

# here the buttons (widget are dynamically define
# This can be defined in the .kv in next phase.
class MainWidget(Widget):

    def __init__(self, **kwargs):
        super(MainWidget, self).__init__(**kwargs)
        print("\nmainwidget:")
        btnnext = Button(text='go to next', pos=(200, 400))
        # binding function to the button " go to next"
        btnnext.bind(on_press=self.gonext)
        # after assigning the buttom, buttom"go to next" is added as widget to self (MainWidget)
        self.add_widget(btnnext)

    
    def gonext(self, btn_inst):
        app = App.get_running_app()
        app.root.current = "settings"



class MenuScreen(Screen):
    pass


class SettingsScreen(Screen):
# function for button is to be added where the screen class is define
# this is the root ( the left most )
    def mqtt_publish(self):
        topic = "kivy/button"
        publish.single(topic, "hello people", qos=1, hostname='test.mosquitto.org')



class Cam(Image):

    def on_kv_post(self, base_widget):
        self.capture = cv.VideoCapture(0)
        # cv.namedWindow("CV2 Image")
        Clock.schedule_interval(self.update, 1.0 / 33.0)

    def update(self, dt):
        # self = Cam (Image) widget and dt = interval (1.0/33.00)
        # display image from cam in opencv window
        ret, frame = self.capture.read()
        # cv.imshow("CV2 Image", frame)
        # gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)

        # convert it to texture
        # cv.flip() - flip the image to upside down - horizontally
        # buf1.tobytes() convert nparray to bytes

        frame = cv.flip(frame, 0)
        buf = frame.tobytes()

        # INITIATE THE KIVY TEXTURE
        # Texture.create( size = (image.shape[1],image.shape[0]),  colorfmt ='rgb')
        # There could be several type of colorfrmt -rgb luminance bgr

        texture1 = Texture.create(size=(frame.shape[1], frame.shape[0]), colorfmt='rgb')
        # Texture blit - copies the Buffer " buf " into the created texture.
        texture1.blit_buffer(buf, colorfmt='rgb', bufferfmt='ubyte')
        # replacing texture
        # display image from the texture
        self.texture = texture1


class TestApp(App):

    def build(self):
        Window.clearcolor = (0, 0, 0.3, 1)
        return Builder.load_string(kv)


if __name__ == '__main__':
    TestApp().run()

